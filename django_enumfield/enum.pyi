from typing import List, Tuple, TypeVar, Union

from .item import Item

TItem = TypeVar('TItem', bound=Item)

class Enum(List[TItem]):
    name: str
    def __init__(self, name: str, *items: TItem) -> None: ...
    def add_item(self, item: TItem) -> None: ...
    def from_value(self, value: Union[int, str]) -> TItem: ...
    def from_slug(self, slug: str) -> TItem: ...
    def get_choices(self) -> List[Tuple[TItem, str]]: ...
    def to_python(self, value: Union[int, str, TItem, None]): ...

class NoSuchSlugValueError(ValueError):
    slug: str
    enum: Enum
    def __init__(self, slug: str, enum: Enum) -> None: ...
